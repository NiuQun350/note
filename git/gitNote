版本管理: SVN:采用增量式管理的方式   git：采用文件系统快照的方式
集中式版本控制工具：SVS， SVN， VSS
分布式版本控制工具：Git， Mercurial, Bazaar, Darcs
分布式版本控制工具的优点：避免单点故障


本地库:
git在本地的结构：  工作区：写代码的地方，新建文件，修改文件都在这里边  git add 文件名 （从工作区提交到暂存区）
                   暂存区：打算要提交，但是还没有提交，暂时先存在这里，可以提交到本地库，也可以撤回 git commit 文件名 （从暂存区提交到本地库）
                   本地库：实实在在的去存储每一个历史版本的地方

github是git的一个代码托管中心
局域网下，我们可以搭建一个GitLab服务器
外网环境下，我们可以用GitHub（在国外）或者码云（在国内）来来作为代码托管中心


工作区：写代码的地方
    git add <file>
暂存区：临时的一个存储，添加到暂存区的文件是可以去掉的
    git commit -m "" <file>
本地库：历史的版本是存储在本地库中的

本地库初始化:
    首先新建一个空文件夹作为工作区，然后进入文件夹  repository:仓库  master:主
    git init：初始化暂存区   初始化后的空的git仓库是在 当前目录/.git 目录下   .git 目录下存放的是本地库相关的子目录和文件,不要删除，也不要胡乱修改
设置签名；
    比如：用户名：tom  Email地址：goodMorning@qq.com  Email地址没有要求必须和用户名一致
    email即使不存在也可以,它并不是用来发邮件的，而是用来标识开发人员的身份
    辨析：此处的签名和登陆远程代码托管中心的帐号密码一点关系都没有
    
    有两个级别：
    项目级别/仓库级别： 仅在当前本地库范围有效
    git config user.name tom
    git config user.email goodMorning@qq.com
    信息保存在：当前目录/.git/config 下

    系统用户级别:登陆当前操作系统的用户范围
    git config --global user.name tom
    git config --global user.email goodMorning@qq.com
    信息保存在：～/.gitconfig 下

    通常只需要设置系统用户签名就可以了
    优先级：
	就近原则：项目级别>系统用户级别, 即两者都有时，采用项目级别
	如果只有系统级别的签名，就以系统用户级别签名为准
	如果两者都没有是不允许的



git add <file> : 将工作区的“新建/修改”文件添加到暂存

    	       	 Checkout Windows-style, commit Unix-style line endings
    	       	 按照windows风格检出，按照Linux风格提交
		 convert:转换 recommended:推荐的

    	         CRLF 和 LF 是文本换行的不同方式：
		 crlf: "\r\n", windows系统的换行方式
		 lf: "\n", Linux系统的换行方式
		 他们之间的不同经常会导致不同会导致使用不同系统的同事之间的代码冲突问题。
		 在你使用git拉取代码的时候，git会自动将代码当中与你当前系统不同的换行方式转化成你当前系统的换行方式，从而造成这种冲突。
git rm --cached <file>: 将暂存区的文件撤销

git commit <file> : 将暂存区的文件提交到本地库,此时会进入vim编辑模式，要求写入注释信息
git commit -m "commit message" <file> : 同上一个信息，只不过是可以直接在" "中写入注释信息

    如果改变已经提交到本地库的文件，调用git status命令后，则会显示modified：
    此时可以直接用git commit -a将更改后的文件提交到本地库
    也可以先git add <file> 然后在git commit <file>


git status :查看工作区和暂存区当前状态状态:
           未追踪的(即该文件目前只存在于工作区，untracked)、
	   已添加到暂存区、
	   工作区干净状态(即工作区为空，nothing added to commit)



查看历史记录: git log(最完整的形式) :当提交的版本次数很多,信息需要多屏显示时,命令和less一样, 空格:向下翻页  b:向上翻页 q:退出
	      git log --pretty==oneline 简洁一些
	      git log --oneline 更简洁一些
	      git reflog  显示的HEAD@{移动到当前版本需要多少步}

版本的前进和后退的三种方式: 1. 基于索引值操作 : git reset --hard[局部索引值(哈希码)] 例如：git reset --hard 5895670
			    2. 使用^符号 git reset --hard HEAD^^^^  一个…^^表示后退一步，^^表示后退n步     只能后退
			    3. 使用~符号 git reset --hard HEAD~n 表示后退n步          只能后退

reset 命令的三个参数的对比：
      --soft参数：仅仅在本地库移动HEAD指针
      --mixed参数：在本地库移动HEAD指针，同时也会重置暂存区
      --hard参数：在本地库移动HEAD指针，同时也会重置暂存区， 并且重置工作区

删除文件并找回： 找回的前提：删除前，文件存在时的状态提交到了本地库 操作：git reset --hard [某一个指针位置]
		 删除操作已经提交到本地库：指针位置指向历史记录
		 删除操作尚未提交到本地库：指针位置使用HEAD
	
比较文件的差异：git diff 文件名  是将工作区中的文件和暂存区进行比较
		git diff 本地库中的历史版本  文件名  是将工作区中的文件和本地库历史记录进行比较

如果我将工作区中的文件进行了修改， 可是突然又不想进行刚才的修改， 可以使用 git checkout -- 文件名 使工作区的文件内容恢复到修改之前


分支操作：
	创建分支：  git branch 分支名
	删除本地分支： git branch -d 分支名 注意：删除前本地分支不能是即将要删除的分支
	查看分支：  git branch -v    *代表当前所处的分支位置
	切换分支：  git checkout [分支名] 
	合并分支：  第一步：切换到接受修改的分支上（被合并，增加新内容） 例如：需要将hot_fix分支合并到master分支中 则需要先切换到master分支中，
		    							      即git checkout master, 然后再git merge hot_fix
		    第二步：执行一个merge命令
	解决冲突： 当两个分支各自修改的内容出现修改位置在各自的同一文件的同一行时，
		   自动合并的时候系统无法决定到底采用哪一个，那么此时系统会将两个文件的内容都保留下来，由人工决定如何修改
		   解决方法： 第一步：编辑文件，删除特殊符号
		   	      第二步：把文件修改到满意的程度，保存退出
			      第三步：git add 有冲突的文件的名
文件名
			      第四步：git commit -m "日志信息"

git remote -v 查看远程库地址别名            remote(远程)   fetch(取回) push（推送）
git remote add 别名 远程库地址

 push:   git push 远程库地址别名 本地库分支名           向远程库推送文件
 clone:  git clone 远程库地址           把远程库克隆到本地：克隆结果包括：完整的把远程库下载到本地，自动创建远程地址别名，初始化本地库
 push:  先邀请加入团队 然后命令： git push 远程库地址别名 本地库分支名
 pull:  pull = fetch + merge          命令: git fetch 远程库地址别名 远程分支名      git merge 远程库地址别名/远程分支名

解决冲突：
	要点：如果不是基于GitHub的最新版所做的修改，就会出现不能推送现象，必须先拉取  git pull 远程库地址别名 远程分支名
	拉取下来后如果进入冲突状态，则按照“则按照分支冲突解决操作解决即可                                                               

跨团队协作：  将远程库地址发给能够给予帮助的人， 他用自己的github帐号访问该地址， 然后点击Fork按钮，

Eclipse 中进行Git操作 工程——>右键——>Team——>Share Project ——>Git——>选中方框